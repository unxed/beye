#!/bin/bash
# Configure script for beye project
#
. ./functions
init_functions

ENABLED_LIST=(
    "fastcall|use regparm method on x86 systems",
    "constfunc|use const modifier for some functions",
    "purefunc|use pure modifier for some functions",
    "mouse|build mouse support on *nix systems",
    "iconv|build iconv support",
)

DISABLED_LIST=(
    "gomp|use GNU OpenMP (requires gcc-4.3+)",
    "gcov|compile gnu coverage information into PROGRAM",
    "profile|compile profiling information into PROGRAM",
)

AUTOCONF_LIST=(
    "ENABLED_LIST",
    "DISABLED_LIST"
)

PATH_LIST=(
    "prefix|architecture-independent files|/usr/local",
    "exec_prefix|architecture-dependent files|\$prefix",
    "bindir|user executables|\$exec_prefix/bin",
    "libdir|object code libraries|\$exec_prefix/lib",
    "datadir|read-only architecture-independent data|\$prefix/share/beye",
    "docdir|read-only documentation directory|\$prefix/doc/beye",
    "mandir|read-only configuration files|\$prefix/share/man"
)

PROGNAME_LIST=(
  "program_prefix|prepend PREFIX to installed program names",
  "program_suffix|append SUFFIX to installed program names",
  "program_transform_name|use TRANSFORM_NAME as program name|beye"
)

SYSTYPES_LIST=(
    "build|configure for building on BUILD [guessed]",
    "host|cross-compile to build program to run on HOST [BUILD]",
    "cc|use this C compiler to build PROGRAM|gcc",
    "cxx|use this C++ compiler to build PROGRAM|g++",
    "as|use this ASSEMBLER to build PROGRAM|as",
    "ld|use this LINKER to build PROGRAM|gcc",
    "ldxx|use this LINKER to build PROGRAM with C++ sources|g++",
    "ldconfig|use this LDCONFIG to install PROGRAM|ldconfig",
    "install|use this INSTALL to install PROGRAM|install",
    "pkg_config|use this PKG-CONFIG to configure PROGRAM|pkg-config",
    "ar|use this AR to build beyelib|ar -r",
    "ranlib|use RANLIB to build indexes on builib|ranlib",
    "rm|use RM program to cleanup files|rm",
    "ln|use LN program to make soft link|ln",
    "cd|use CD program to change directory|cd",
    "cp|use CP program to copy files|cp",
    "debug|compile debugging information into PROGRAM|0",
)

SYSCONF_LIST=(
    "SYSTYPES_LIST",
    "PROGNAME_LIST",
    "PATH_LIST"
)

EXTRA_LIST=(
    "asflags|add these FLAGS to [\$ASFLAGS=$ASFLAGS]",
    "cflags|add these FLAGS to [\$CFLAGS=$CFLAGS]",
    "cxxflags|add these FLAGS to [\$CXXFLAGS=$CXXFLAGS]",
    "ldflags|add these FLAGS to [\$LDFLAGS=$LDFLAGS]",
    "ldxxflags|add these FLAGS to [\$LDXXFLAGS=$LDXXFLAGS]",
    "extralibs|add these LIBS to [\$LIBS=$LIBS]"
)

ADD_LIST=(
    "EXTRA_LIST",
)

ENVIRONMENT_LIST=(
    "MAKE|Make command (example: 'make -j')|make",
    "AS|Assembler command|as",
    "CC|C compiler command (example: 'gcc -m64')|cc",
    "CXX|C++ compiler command (example: 'g++ -m64')|cxx",
    "CFLAGS|C compiler flags (example: '-funit-at-a-time')",
    "CXXFLAGS|C++ compiler flags (example: '-Weffc++')",
    "LDFLAGS|linker flags (example: '-L/opt/lib64')",
    "LDXXFLAGS|C++ linker flags (example: '-L/opt/lib64')",
    "LIBS|additional libraries (example: 'LIBS=-lacml_mv')",
    "DESTDIR|specifies base of installation"
)

HELP_LIST=(
    "PATH_LIST|Fine tuning of the installation directories|--",
    "PROGNAME_LIST|Program names|--",
    "SYSTYPES_LIST|System types|--",
    "EXTRA_LIST|Extralist|--",
    "ENABLED_LIST|Optional list of enabled fautures|--disable-",
    "DISABLED_LIST|Optional list of disabled fautures|--enable-",
    "ENVIRONMENT_LIST|Environment variables|  "
)

DEFAULT_LIST=(
    "PATH_LIST|Fine tuning of the installation directories|--",
    "SYSTYPES_LIST|System types|--",
    "PROGNAME_LIST|Program names|--",
    "EXTRA_LIST|Extralist|--"
)

enable_list "ENABLED_LIST"
disable_list "DISABLED_LIST"
make_environment "ENVIRONMENT_LIST"

for ac_option do
  optval="${ac_option#*=}"
  case "$ac_option" in
  --help)
    print_help "HELP_LIST"
    exit 0
    ;;
  --enable-*=*|--disable-*=*)
    eval $(echo "${ac_option%%=*}" | sed 's/--/action=/;s/-/ thing=/')
    in_list "AUTOCONF_LIST" ${thing} || bad_options="$ac_option $bad_options"
    if test "$action" = "disable"; then
      test "${optval}" = "no" && action=enable
    else
      test "${optval}" = "no" && action=disable
    fi
    echo "$action ${thing}"
    $action ${thing}
    ;;

    --enable-?*|--disable-?*)
    eval $(echo "$ac_option" | sed 's/--/action=/;s/-/ thing=/;s/-/_/g')
    in_list "AUTOCONF_LIST" ${thing} || bad_options="$ac_option $bad_options"
    $action ${thing}
    ;;
    *)
    optname="${ac_option%%=*}"
    optname="${optname#--}"
    optname=${optname//-/_}
    if in_list "SYSCONF_LIST" $optname ; then
        eval $optname=$optval
    elif in_list "ADD_LIST" $optname ; then
	action="add_$optname"
	$action ${optval}
    else
        bad_options="$ac_option $bad_options"
    fi
    ;;
  esac
done
make_defaults "DEFAULT_LIST"

mktmps
guess_target config.mak config.h

###
###
###

cc_name=`$cc -v 2>&1 | tail -n 1 | cut -d ' ' -f 1`
cc_version=`$cc -dumpversion`

echocheck "C compiler name"
echores $cc_name
case $cc_name in
    gcc)
    ;;
    *)
      die "Unknown compiler name $cc_name. Project requires GCC"
    ;;
esac

echocheck "C compiler version"
echores $cc_version
disable gcc44_workaround
case $cc_version in
    4.[4-9]|4.[4-9].[0-9])
      enable gcc44_workaround
      ;;
  [0-2]|[0-2].[0-9]|[0-2].[0-9].[0-9])
    die "Please upgrade your gcc upto gcc-3.0 at least"
    ;;
esac

echocheck "whether the $cxx compiler works"
cat > $TMPC << EOF
#include <stdlib.h>
#include <malloc.h>
#include <new>

typedef void any_t;
enum zeromemory_t{ zeromem=0 };
inline any_t* operator new(size_t size,const zeromemory_t&) {
    return malloc(size);
}
inline any_t* operator new[](size_t size,const zeromemory_t&) {
    return malloc(size);
}
inline void operator delete(any_t* p) { free(p); }

namespace beye {
    inline int funci(int i) { return i+2; }
}

using namespace beye;
int main(void) {
    char* cstr=new(zeromem) char [20];
    delete cstr;
    return funci(2);
}
EOF
cxx_check || die "no"

echocheck "Program name"
prog_alias=$program_transform_name
prog_alias="$program_prefix$prog_alias$program_suffix"
echores "$prog_alias"

if cygwin ; then
# Keep everything in .exe folder
test -z "$datadir" && datadir="."
test -z "$mandir" && confdir="."
test -z "$libdir" && libdir="."
fi

srcdir=`pwd`
#checking for pkg-config
test $($pkg_config --version 2>/dev/null) || echo "no pkg-config found"
#############################################################################
test_optimizations config.mak config.h

enabled "$profile"	&& disable fastcall

if enabled fastcall; then
echocheck "__attribute__ ((regparm (3)))"
cat > $TMPC << EOF
int __attribute__ ((regparm (3))) func(int a) { return a; }
int main(void){return func(0);}
EOF
disable fastcall
cc_check && enable fastcall
echores "$fastcall"
fi
print_config USE_ config.h config.mak fastcall

if enabled constfunc; then
echocheck "__attribute__ ((const))"
cat > $TMPC << EOF
int func(int a) { return a; } __attribute__ ((const))
int main(void){return func(0);}
EOF
disable constfunc
cc_check && enable constfunc
echores "$constfunc"
fi
print_config USE_ config.h config.mak constfunc

if enabled purefunc; then
echocheck "__attribute__ ((pure))"
cat > $TMPC << EOF
int func(int a) { return a; } __attribute__ ((pure))
int main(void){return func(0);}
EOF
disable purefunc
cc_check && enable purefunc
echores "$constfunc"
fi
print_config USE_ config.h config.mak purefunc

# Checking for GOMP
enabled gomp && check_ldflags -fopenmp || disable gomp
enabled gomp && require2 gomp omp.h omp_get_thread_num -lgomp || disable gomp
enabled gomp && check_cflags -fopenmp || disable gomp
print_config HAVE_ config.h config.mak gomp
#enabled gomp && check_cflags -ftree-parallelize-loops=4
#####################################################
add_cflags "-I$srcdir"
check_cflags "-W"
check_cflags "-Wall"
check_cflags "-Wextra"
check_cflags "-Wshadow"
check_cflags "-Warray-bounds"
check_cflags "-Wreturn-type"
check_cflags "-Wuninitialized"
check_cflags "-Wlogical-op"
check_cflags "-Waddress"
# fixes MAC OS X compilation:
check_cflags "-mdynapic-no-pic"
check_cflags "-fno-pic"

echocheck CFLAGS
echores   $CFLAGS
echocheck CXXFLAGS
echores   $CXXFLAGS
echocheck ASFLAGS
echores   $ASFLAGS
echocheck LDFLAGS
echores   $LDFLAGS
echocheck LDXXFLAGS
echores   $LDXXFLAGS
echocheck LIBS
echores   $LIBS
echocheck extralibs
echores   $extralibs

######################
# MAIN TESTS GO HERE #
######################

# Printout architecture
system=`echo $lc_host_os | tr [:upper:] [:lower:]`
machine=generic
if x86_32 ; then
machine=ia32
fi
if x86_64 ; then
machine=x86_64
fi
echo "#define __DEFAULT_DISASM 0" >>config.h
x86 && echo "#define CAN_COMPILE_X86_GAS 1">>config.h
is_generic_cpu=$(echo $machine | grep generic)

disable ppack
echocheck "pragma pack"
cat > $TMPC << EOF
#pragma pack(1)
int main(void){return 0;}
EOF
cc_check && enable ppack
enabled ppack || die "Please upgrade your compiler"
echores "$ppack"
print_config HAVE_ config.h config.mak ppack

#Printout operating system
app_libs=""
app_cflags=""
app_ldflags=""
ar="ar -r"
enable terminal_out
exesuf=
libext=a
libprefix=lib
if dos ; then
app_ldflags="--force-exe-suffix"
libext=lib
exesuf=".exe"
disable terminal_out
fi
if os2 ; then
app_ldflags="-Zexe -Zsmall-conv -Zsys -Zomf -Zstack 1024"
app_cflags="-Zomf"
disable terminal_out
ar="emxomfar -p32 rc"
ranlib=echo
libext=lib
exesuf=".exe"
fi
if win32 ; then
app_libs="-lwinmm"
app_ldflags="-static"
app_cflags=
libext=lib
exesuf=".exe"
disable terminal_out
fi
if cygwin ; then
app_ldflags+="-mno-cygwin"
app_cflags+="-mno-cygwin"
fi
if beos ; then
app_cflags="-D__DISABLE_MMF -D__DISABLE_ASM -D__DISABLE_SIGIO"
datadir="/boot/home/config/lib"
fi
if qnx ; then
app_cflags="-D__DISABLE_MMF"
app_libs="-ltermlib -lunix -lphoton3r.lib"
fi
if qnxnto ; then
app_cflags="-D__QNX6__ -D__DISABLE_MMF"
app_libs="-lncurses"
fi
if linux ; then
app_cflags="-fPIE"
fi
add_cflags $app_cflags
add_ldflags $app_ldflags
add_extralibs $app_libs
print_config HAVE_ config.h config.mak terminal_out

check_func2 execinfo.h backtrace
print_config HAVE_ config.h config.mak backtrace

check_func2 stdio.h popen
print_config HAVE_ config.h config.mak popen

check_func2 stdio.h pclose
print_config HAVE_ config.h config.mak pclose

check_header sys/resource.h
print_config HAVE_ config.h config.mak sys_resource_h

check_func2 sys/mman.h mmap
print_config HAVE_ config.h config.mak mmap

check_func2 sys/mman.h mprotect
print_config HAVE_ config.h config.mak mprotect

check_header endian.h
print_config HAVE_ config.h config.mak endian_h

check_header byteswap.h
print_config HAVE_ config.h config.mak byteswap_h

if disabled endian_h; then
disable bigendian
check_cc <<EOF || die "endian test failed"
unsigned int endian = 'B' << 24 | 'I' << 16 | 'G' << 8 | 'E';
EOF
od -A n -t x1 $TMPO | grep -q '42 *49 *47 *45' && enable bigendian
enabled bigendian && byteorder="__BIG_ENDIAN" || byteorder="__LITTLE_ENDIAN"
fi

if enabled iconv; then
require2 giconv giconv.h iconv_open -lgiconv
print_config HAVE_ config.h config.mak giconv
disable iconv
for ld_i in "" -liconv ; do
disabled iconv	&& require2 iconv iconv.h iconv_open $ld_i
enabled iconv	&& break
done
print_config HAVE_ config.h config.mak iconv
fi

check_func2 malloc.h memalign
print_config HAVE_ config.h config.mak memalign

enabled mouse && require2 mouse gpm.h Gpm_GetEvent -lgpm
print_config HAVE_ config.h config.mak mouse

# find pagesize on this system
echocheck "VM pagesize is"
cat > $TMPC << EOF
#include <stdio.h>
#include <unistd.h>
int main(void) { printf("%i\n",getpagesize()); }
EOF
syspagesize="no"
cc_check && syspagesize="yes"
if enabled syspagesize ; then
vm_pagesize=`$TMPO`
else
vm_pagesize="1"
fi
echores "$vm_pagesize"

# pseudo-ramdom names
cat > $TMPC << EOF
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
int main(void) {
    srand(time(0));
    printf("%u %u %u %u %u %u %u %u %u %u\n"
    ,rand(),rand(),rand(),rand(),rand(),rand(),rand(),rand(),rand(),rand()); }
EOF
cc_check || die "Canot generate pseudo-random numbers"

echocheck "generating pseudo-random numbers"
rnd_arr=`$TMPO`
sleep 1
rnd_carr=`$TMPO`
sleep 1
rnd_sarr=`$TMPO`
sleep 1
rnd_farr=`$TMPO`
echores "done"

rnd0=`echo $rnd_arr | cut -d ' ' -f 1`
rnd1=`echo $rnd_arr | cut -d ' ' -f 2`
rnd2=`echo $rnd_arr | cut -d ' ' -f 3`
rnd3=`echo $rnd_arr | cut -d ' ' -f 4`
rnd4=`echo $rnd_arr | cut -d ' ' -f 5`
rnd5=`echo $rnd_arr | cut -d ' ' -f 6`
rnd6=`echo $rnd_arr | cut -d ' ' -f 7`
rnd7=`echo $rnd_arr | cut -d ' ' -f 8`
rnd8=`echo $rnd_arr | cut -d ' ' -f 9`
rnd9=`echo $rnd_arr | cut -d ' ' -f 10`

srnd0=`echo $rnd_sarr | cut -d ' ' -f 1`
srnd1=`echo $rnd_sarr | cut -d ' ' -f 2`
srnd2=`echo $rnd_sarr | cut -d ' ' -f 3`
srnd3=`echo $rnd_sarr | cut -d ' ' -f 4`
srnd4=`echo $rnd_sarr | cut -d ' ' -f 5`
srnd5=`echo $rnd_sarr | cut -d ' ' -f 6`
srnd6=`echo $rnd_sarr | cut -d ' ' -f 7`
srnd7=`echo $rnd_sarr | cut -d ' ' -f 8`
srnd8=`echo $rnd_sarr | cut -d ' ' -f 9`
srnd9=`echo $rnd_sarr | cut -d ' ' -f 10`

frnd0=`echo $rnd_farr | cut -d ' ' -f 1`
frnd1=`echo $rnd_farr | cut -d ' ' -f 2`
frnd2=`echo $rnd_farr | cut -d ' ' -f 3`
frnd3=`echo $rnd_farr | cut -d ' ' -f 4`
frnd4=`echo $rnd_farr | cut -d ' ' -f 5`
frnd5=`echo $rnd_farr | cut -d ' ' -f 6`
frnd6=`echo $rnd_farr | cut -d ' ' -f 7`
frnd7=`echo $rnd_farr | cut -d ' ' -f 8`
frnd8=`echo $rnd_farr | cut -d ' ' -f 9`
frnd9=`echo $rnd_farr | cut -d ' ' -f 10`

crnd0=`echo $rnd_carr | cut -d ' ' -f 1`
crnd1=`echo $rnd_carr | cut -d ' ' -f 2`
crnd2=`echo $rnd_carr | cut -d ' ' -f 3`
crnd3=`echo $rnd_carr | cut -d ' ' -f 4`
crnd4=`echo $rnd_carr | cut -d ' ' -f 5`
crnd5=`echo $rnd_carr | cut -d ' ' -f 6`
crnd6=`echo $rnd_carr | cut -d ' ' -f 7`
crnd7=`echo $rnd_carr | cut -d ' ' -f 8`
crnd8=`echo $rnd_carr | cut -d ' ' -f 9`
crnd9=`echo $rnd_carr | cut -d ' ' -f 10`

crnd0=$(($crnd0 % 255))
crnd1=$(($crnd1 % 255))
crnd2=$(($crnd2 % 255))
crnd3=$(($crnd3 % 255))
crnd4=$(($crnd4 % 255))
crnd5=$(($crnd5 % 255))
crnd6=$(($crnd6 % 255))
crnd7=$(($crnd7 % 255))
crnd8=$(($crnd8 % 255))
crnd9=$(($crnd9 % 255))



CXXFLAGS=$CFLAGS

./version.sh

#Force including of our .h files before standard
#############################################################################
echo "Creating config.h"
cat >> config.h << EOF
#define HOST "$host"

#ifndef HAVE_ENDIAN_H
#define __BYTE_ORDER $byteorder
#endif

/* Defined to some form of __attribute__ ((...)) if the compiler supports
   a different, more efficient calling convention.  */
#if defined ( USE_FASTCALL )
#if defined ( __i386__ )
/* define internal_function __attribute__ ((regparm (3), stdcall)) */
# define __FASTCALL__ __attribute__ ((regparm (3)))
#else
/* define internal_function __attribute__ ((regparm (6), stdcall)) */
# define __FASTCALL__ __attribute__ ((regparm (6)))
#endif
#else
# define __FASTCALL__
#endif

#if defined ( USE_CONSTFUNC )
/* Example: sin(), cos() */
# define __CONST_FUNC__ __attribute__ ((const))
#else
# define __CONST_FUNC__
#endif

#if defined ( USE_PUREFUNC )
/* Example: strlen(), memcmp() */
# define __PURE_FUNC__ __attribute__ ((pure))
#else
# define __PURE_FUNC__
#endif

typedef void any_t;

/* Removes warning about unused arguments */
# define UNUSED(x) ((any_t)(x))

/* Physical size of page on this system */
#define __VM_PAGE_SIZE__ $vm_pagesize
#if defined(__GNUC__) && (__GNUC__ > 3 || __GNUC__ == 3 && __GNUC_MINOR__ > 0)
#define __PAGE_ALIGNED__ __attribute__ ((aligned (__VM_PAGE_SIZE__)))
#else
#define __PAGE_ALIGNED__
#endif

/* Compile-time random numbers */
#define RND_CHAR0 $crnd0
#define RND_CHAR1 $crnd1
#define RND_CHAR2 $crnd2
#define RND_CHAR3 $crnd3
#define RND_CHAR4 $crnd4
#define RND_CHAR5 $crnd5
#define RND_CHAR6 $crnd6
#define RND_CHAR7 $crnd7
#define RND_CHAR8 $crnd8
#define RND_CHAR9 $crnd9

#define RND_NUMBER0 $rnd0
#define RND_NUMBER1 $rnd1
#define RND_NUMBER2 $rnd2
#define RND_NUMBER3 $rnd3
#define RND_NUMBER4 $rnd4
#define RND_NUMBER5 $rnd5
#define RND_NUMBER6 $rnd6
#define RND_NUMBER7 $rnd7
#define RND_NUMBER8 $rnd8
#define RND_NUMBER9 $rnd9

#define RND_STR0 "x$srnd0"
#define RND_STR1 "x$srnd1"
#define RND_STR2 "x$srnd2"
#define RND_STR3 "x$srnd3"
#define RND_STR4 "x$srnd4"
#define RND_STR5 "x$srnd5"
#define RND_STR6 "x$srnd6"
#define RND_STR7 "x$srnd7"
#define RND_STR8 "x$srnd8"
#define RND_STR9 "x$srnd9"


#define RND_RENAME0(a) a ## $frnd0
#define RND_RENAME1(a) a ## $frnd1
#define RND_RENAME2(a) a ## $frnd2
#define RND_RENAME3(a) a ## $frnd3
#define RND_RENAME4(a) a ## $frnd4
#define RND_RENAME5(a) a ## $frnd5
#define RND_RENAME6(a) a ## $frnd6
#define RND_RENAME7(a) a ## $frnd7
#define RND_RENAME8(a) a ## $frnd8
#define RND_RENAME9(a) a ## $frnd9

#define SECURE_NAME0(a) x$srnd0
#define SECURE_NAME1(a) x$srnd1
#define SECURE_NAME2(a) x$srnd2
#define SECURE_NAME3(a) x$srnd3
#define SECURE_NAME4(a) x$srnd4
#define SECURE_NAME5(a) x$srnd5
#define SECURE_NAME6(a) x$srnd6
#define SECURE_NAME7(a) x$srnd7
#define SECURE_NAME8(a) x$srnd8
#define SECURE_NAME9(a) x$srnd9
EOF

echo "Creating config.mak"
cat >> config.mak << EOF
# -------- Generated by configure -----------

CC=$cc
CXX=$cxx
LD=$ld
AR=$ar
RANLIB=$ranlib
RM=$rm
LN=$ln
CD=$cd
CP=$cp
INSTALL=$install
PROGNAME=$prog_alias
EXESUF=$exesuf
LIBEXT=$libext
LIBPREFIX=$libprefix
PREFIX=$prefix
DATADIR=$datadir
DOCDIR=$docdir
LIBDIR=$libdir
MANDIR=$mandir
DESTDIR=$DESTDIR
HOST=$system
MACHINE=$machine
#-- Compile-time random numbers
RND_NUMBER0 = $rnd0
RND_NUMBER1 = $rnd1
RND_NUMBER2 = $rnd2
RND_NUMBER3 = $rnd3
RND_NUMBER4 = $rnd4
RND_NUMBER5 = $rnd5
RND_NUMBER6 = $rnd6
RND_NUMBER7 = $rnd7
RND_NUMBER8 = $rnd8
RND_NUMBER9 = $rnd9
EOF
echo "HOST_CFLAGS=$CXXFLAGS" >>config.mak
echo "EXTRALIBS=$extralibs" >> config.mak
echo "HOST_LDFLAGS=$LDXXFLAGS $LDFLAGS" >> config.mak

#last: printout configure
cat << EOF | tee -a $TMPLOG

Config files successfully generated by ./configure !

  Install prefix: $prefix
  Data directory: $datadir
  Lib directory: $libdir
  MAN directory: $mandir
  Compiler: $cc
  Linker: $ld
  Librarian: $ar
  Ranlib: $ranlib
  Remover: $rm
  TARGETS
    system: $system
    arch: $machine

EOF

test -n "$is_generic_cpu" && echo "Generic optimization detected: Seems noone have ported this project on your CPU"

rmtmps

